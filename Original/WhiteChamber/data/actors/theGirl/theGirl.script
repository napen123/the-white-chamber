#include "scripts\base.inc"

//global WinSubtitles;
var Portrait;
var Border;

// create a window for subtitles if it doesn't exist yet
if(WinSubtitles==null)
{
	WinSubtitles = Game.CreateWindow("subtitles_window");
	Portrait = WinSubtitles.CreateStatic("speaker_portrait");
	Border = WinSubtitles.CreateStatic("text_border");

	// set up the subtitles window
	WinSubtitles.X = 0;
	WinSubtitles.Y = Game.ScreenHeight - 200;
	WinSubtitles.Width = Game.ScreenWidth;
	WinSubtitles.Height = 200;
	WinSubtitles.Visible = false;

	// set up the speaker portrait
	Portrait.X = 0;
	Portrait.Y = -300;

	// set up the border
	Border.X = 200;
	Border.Y = 0;
	Border.SetImage("interface\textborder.png");

}
//else Static = WinSubtitles.GetControl("speaker_name");

// position of actors' speech subtitles
this.SubtitlesPosRelative = false;
this.SubtitlesPosX = (Game.ScreenWidth/2)+75;
this.SubtitlesPosY = WinSubtitles.Y + 20;
this.SubtitlesWidth = Game.ScreenWidth - 300;


////////////////////////////////////////////////////////////////////////////////
// an overriden Talk method to display the speaker name
////////////////////////////////////////////////////////////////////////////////
method Talk(Text, SoundFilename, Duration, TalkStances, TextAlignment)
{
	Game.Interactive = false;


	if (PortraitType == PORT_NONE)
	{
		Portrait.SetImage("interface\empty.png");
	}
	if (PortraitType == PORT_NORMAL)
	{
		Portrait.SetImage("interface\portraits\portraitnormal.png");
	}
	if (PortraitType == PORT_PUZZLED)
	{
		Portrait.SetImage("interface\portraits\portraitpuzzled.png");
	}
	if (PortraitType == PORT_PISSED)
	{
		Portrait.SetImage("interface\portraits\portraitpissed.png");
	}
	if (PortraitType == PORT_POCKING)
	{
		Portrait.SetImage("interface\portraits\portraitpocking.png");
	}
	if (PortraitType == PORT_ARTHUR)
	{
		Portrait.SetImage("interface\portraits\portraitarthur.png");
	}
	if (PortraitType == PORT_REDDISC)
	{
		Portrait.SetImage("interface\portraits\portraitreddisc.png");
	}
	if (PortraitType == PORT_GREENDISC)
	{
		Portrait.SetImage("interface\portraits\portraitgreendisc.png");
	}
	if (PortraitType == PORT_BLUEDISC)
	{
		Portrait.SetImage("interface\portraits\portraitbluedisc.png");
	}
	if (PortraitType == PORT_MES)
	{
		Portrait.SetImage("interface\portraits\portraitmes.png");
	}
	if (PortraitType == PORT_CREW1)
	{
		Portrait.SetImage("interface\portraits\portraitcrew1.png");
	}
	if (PortraitType == PORT_CREW2)
	{
		Portrait.SetImage("interface\portraits\portraitcrew2.png");
	}
	if (PortraitType == PORT_CREW3)
	{
		Portrait.SetImage("interface\portraits\portraitcrew3.png");
	}
	if (PortraitType == PORT_CREW4)
	{
		Portrait.SetImage("interface\portraits\portraitcrew4.png");
	}


	WinSubtitles.Visible = true;

	if (TTFFont == true)
	{
		this.SetFont("primaryttf.font");
	}
	else
	{
		this.SetFont("primary.font");
	}
	//this.Talk(Text, SoundFilename, Duration, TalkStances, TextAlignment);
	this.Talk(Text, SoundFilename, Duration, TalkStances, 0);

	WinSubtitles.Visible = false;
	Game.Interactive = true;
}


////////////////////////////////////////////////////////
// Walking sound handler
///////////////////////////////////////////////////////
on "footstep"
{

 // get a region the actor is standing in
 var Reg = Scene.GetRegionAt(this.X, this.Y);
 if (Reg!=null)
 {

   	// play a sound depenging on a surface
	// "xSurface" is a custom property we defined in SceneEdit

	if (Reg.xSurface == "metal")
	{
		switch(Random(1,5))
		{
			case 1: this.PlaySound("audio\sounds\walkmetala.ogg",false); break;
			case 2: this.PlaySound("audio\sounds\walkmetalb.ogg",false); break;
			case 3: this.PlaySound("audio\sounds\walkmetalc.ogg",false); break;
			case 4: this.PlaySound("audio\sounds\walkmetald.ogg",false); break;
			case 5: this.PlaySound("audio\sounds\walkmetale.ogg",false); break;
		} 
	}


	if (Reg.xSurface == "grating")
	{
		switch(Random(1,6))
		{
			case 1: this.PlaySound("audio\sounds\walkgratinga.ogg"); break;
			case 2: this.PlaySound("audio\sounds\walkgratingb.ogg"); break;
			case 3: this.PlaySound("audio\sounds\walkgratingc.ogg"); break;
			case 4: this.PlaySound("audio\sounds\walkgratingd.ogg"); break;
			case 5: this.PlaySound("audio\sounds\walkgratinge.ogg"); break;
			case 6: this.PlaySound("audio\sounds\walkgratingf.ogg"); break;
		}
	}


	if (Reg.xSurface == "sand")
	{
		switch(Random(1,8))
		{
			case 1: this.PlaySound("audio\sounds\walksanda.ogg"); break;
			case 2: this.PlaySound("audio\sounds\walksandb.ogg"); break;
			case 3: this.PlaySound("audio\sounds\walksandc.ogg"); break;
			case 4: this.PlaySound("audio\sounds\walksandd.ogg"); break;
			case 5: this.PlaySound("audio\sounds\walksande.ogg"); break;
			case 6: this.PlaySound("audio\sounds\walksandf.ogg"); break;
			case 7: this.PlaySound("audio\sounds\walksandg.ogg"); break;
			case 8: this.PlaySound("audio\sounds\walksandh.ogg"); break;
		}
	}

	if (Reg.xSurface == "carpet")
	{
		switch(Random(1,8))
		{
			case 1: this.PlaySound("audio\sounds\walkcarpeta.ogg"); break;
			case 2: this.PlaySound("audio\sounds\walkcarpetb.ogg"); break;
			case 3: this.PlaySound("audio\sounds\walkcarpetc.ogg"); break;
			case 4: this.PlaySound("audio\sounds\walkcarpetd.ogg"); break;
			case 5: this.PlaySound("audio\sounds\walkcarpete.ogg"); break;
			case 6: this.PlaySound("audio\sounds\walkcarpetf.ogg"); break;
			case 7: this.PlaySound("audio\sounds\walkcarpetg.ogg"); break;
			case 8: this.PlaySound("audio\sounds\walkcarpeth.ogg"); break;
		}
	}

	if (Reg.xSurface == "metalecho")
	{
		switch(Random(1,8))
		{
			case 1: this.PlaySound("audio\sounds\walkmetalechoa.ogg"); break;
			case 2: this.PlaySound("audio\sounds\walkmetalechob.ogg"); break;
			case 3: this.PlaySound("audio\sounds\walkmetalechoc.ogg"); break;
			case 4: this.PlaySound("audio\sounds\walkmetalechod.ogg"); break;
			case 5: this.PlaySound("audio\sounds\walkmetalechoe.ogg"); break;
			case 6: this.PlaySound("audio\sounds\walkmetalechof.ogg"); break;
			case 7: this.PlaySound("audio\sounds\walkmetalechog.ogg"); break;
			case 8: this.PlaySound("audio\sounds\walkmetalechoh.ogg"); break;
		}
	}

	if (Reg.xSurface == "glassecho")
	{
		switch(Random(1,8))
		{
			case 1: this.PlaySound("audio\sounds\walkglassechoa.ogg"); break;
			case 2: this.PlaySound("audio\sounds\walkglassechob.ogg"); break;
			case 3: this.PlaySound("audio\sounds\walkglassechoc.ogg"); break;
			case 4: this.PlaySound("audio\sounds\walkglassechod.ogg"); break;
			case 5: this.PlaySound("audio\sounds\walkglassechoe.ogg"); break;
			case 6: this.PlaySound("audio\sounds\walkglassechof.ogg"); break;
			case 7: this.PlaySound("audio\sounds\walkglassechog.ogg"); break;
			case 8: this.PlaySound("audio\sounds\walkglassechoh.ogg"); break;
		}
	}

	if (Reg.xSurface == "blood")
	{
		switch(Random(1,8))
		{
			case 1: this.PlaySound("audio\sounds\walkblooda.ogg"); break;
			case 2: this.PlaySound("audio\sounds\walkbloodb.ogg"); break;
			case 3: this.PlaySound("audio\sounds\walkbloodc.ogg"); break;
			case 4: this.PlaySound("audio\sounds\walkbloodd.ogg"); break;
			case 5: this.PlaySound("audio\sounds\walkbloode.ogg"); break;
			case 6: this.PlaySound("audio\sounds\walkbloodf.ogg"); break;
			case 7: this.PlaySound("audio\sounds\walkbloodg.ogg"); break;
			case 8: this.PlaySound("audio\sounds\walkbloodh.ogg"); break;
		}
	}

	if (Reg.xSurface == "gore")
	{
		switch(Random(1,8))
		{
			case 1: this.PlaySound("audio\sounds\walkgorea.ogg"); break;
			case 2: this.PlaySound("audio\sounds\walkgoreb.ogg"); break;
			case 3: this.PlaySound("audio\sounds\walkgorec.ogg"); break;
			case 4: this.PlaySound("audio\sounds\walkgored.ogg"); break;
			case 5: this.PlaySound("audio\sounds\walkgoree.ogg"); break;
			case 6: this.PlaySound("audio\sounds\walkgoref.ogg"); break;
			case 7: this.PlaySound("audio\sounds\walkgoreg.ogg"); break;
			case 8: this.PlaySound("audio\sounds\walkgoreh.ogg"); break;
		}
	}

	if (Reg.xSurface == "padded")
	{
		switch(Random(1,8))
		{
			case 1: this.PlaySound("audio\sounds\walkpaddeda.ogg"); break;
			case 2: this.PlaySound("audio\sounds\walkpaddedb.ogg"); break;
			case 3: this.PlaySound("audio\sounds\walkpaddedc.ogg"); break;
			case 4: this.PlaySound("audio\sounds\walkpaddedd.ogg"); break;
			case 5: this.PlaySound("audio\sounds\walkpaddede.ogg"); break;
			case 6: this.PlaySound("audio\sounds\walkpaddedf.ogg"); break;
			case 7: this.PlaySound("audio\sounds\walkpaddedg.ogg"); break;
			case 8: this.PlaySound("audio\sounds\walkpaddedh.ogg"); break;
		}
	}

	if (Reg.xSurface == "pebbles")
	{
		switch(Random(1,8))
		{
			case 1: this.PlaySound("audio\sounds\walkpebblesa.ogg"); break;
			case 2: this.PlaySound("audio\sounds\walkpebblesb.ogg"); break;
			case 3: this.PlaySound("audio\sounds\walkpebblesc.ogg"); break;
			case 4: this.PlaySound("audio\sounds\walkpebblesd.ogg"); break;
			case 5: this.PlaySound("audio\sounds\walkpebblese.ogg"); break;
			case 6: this.PlaySound("audio\sounds\walkpebblesf.ogg"); break;
			case 7: this.PlaySound("audio\sounds\walkpebblesg.ogg"); break;
			case 8: this.PlaySound("audio\sounds\walkpebblesh.ogg"); break;
		}
	}

	if (Reg.xSurface == "mes")
	{
		switch(Random(1,2))
		{
			case 1: this.PlaySound("audio\sounds\walkmesa.ogg"); break;
			case 2: this.PlaySound("audio\sounds\walkmesb.ogg"); break;
		}
	}



 }
}

on "axeHit"
{
	switch(AxeType)
	{
		case 0: break;
		case 1: this.PlaySound("audio\sounds\livingroom-chainaxe.wav",false); break;
		case 2: this.PlaySound("audio\sounds\computerroom-axebounce.wav",false); break;
		case 3: this.PlaySound("audio\sounds\computerroom-axebreak.wav",false); break;
		case 4: this.PlaySound("audio\sounds\freezer-legaxe.wav",false); break;
	}
}